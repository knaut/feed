{"version":3,"sources":["reducers/root.js","reducers/user.js","styles/index.js","styles/colors.js","styles/app.js","components/SignIn.jsx","App.js","serviceWorker.js","index.js"],"names":["rootReducer","combineReducers","user","state","arguments","length","undefined","action","newState","Object","objectSpread","type","styles","colors","primaries","yellow","orange","red","purple","cyan","pastels","darks","app","container","textAlign","minHeight","display","flexDirection","alignItems","justifyContent","SignIn","onClick","blockstack","concat","window","location","origin","react_default","a","createElement","Box","pad","horizontal","vertical","style","color","align","gap","Button","icon","Login","label","this","primary","Component","App","Grommet","theme","grommet","background","components_SignIn","Boolean","hostname","match","store","createStore","applyMiddleware","promise","thunk","createLogger","userSignedIn","console","log","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAWA,IAIeA,EAJKC,YAAgB,CAClCC,KCXa,WAGb,IAFAC,EAEAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFQ,GACRG,EACAH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACIE,EAAQC,OAAAC,EAAA,EAAAD,CAAA,GACPN,GAKD,OAFII,EAAOI,KAEJH,oECHEI,EALA,CACbC,OCqBa,CACbC,UAzBgB,CAChBC,OAAQ,UACRC,OAAQ,UACRC,IAAK,UACLC,OAAQ,UACRC,KAAM,WAqBNC,QAlBc,CACdL,OAAQ,UACRC,OAAQ,UACRC,IAAK,UACLC,OAAQ,UACRC,KAAM,WAcNE,MAXY,CACZN,OAAQ,UACRC,OAAQ,UACRC,IAAK,UACLC,OAAQ,UACRC,KAAM,YDjBNG,IEMU,CACVC,UAVgB,CAChBC,UAAU,SACVC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,uCCoCHC,6MAjCbC,QAAU,WACRC,mBAAA,GAAAC,OACKC,OAAOC,SAASC,QADrB,GAAAH,OAEKC,OAAOC,SAASC,OAFrB,kBAGE,CAAC,2FAKH,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,IAAK,CAAEC,WAAY,SAAUC,SAAU,UAC1CN,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MACEK,MAAO,CACLC,MAAOjC,EAAOC,OAAOO,QAAQF,SAFjC,cAKamB,EAAAC,EAAAC,cAAA,UAAQK,MAAO,CACxBC,MAAOjC,EAAOC,OAAOC,UAAUI,SADtB,QALb,KASAmB,EAAAC,EAAAC,cAAA,KAAGK,MAAO,CAACC,MAAOjC,EAAOC,OAAOO,QAAQF,SAAxC,4EACAmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKM,MAAM,SAASL,IAAI,QAAQM,IAAI,SAClCV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,KAAMZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,MAAWC,MAAM,kCAAkCpB,QAASqB,KAAKrB,QAASsB,SAAO,eAzBxFC,aCmBNC,mLAfX,OACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAASC,MAAOC,WACdrB,EAAAC,EAAAC,cAAA,OACEK,MAAKnC,OAAAC,EAAA,EAAAD,CAAA,CACHkD,WAAY/C,EAAOC,OAAOQ,MAAMH,QAC7BN,EAAOU,IAAIC,YAGhBc,EAAAC,EAAAC,cAACqB,EAAD,eAVQN,aCAEO,QACW,cAA7B3B,OAAOC,SAAS2B,UAEe,UAA7B5B,OAAOC,SAAS2B,UAEhB5B,OAAOC,SAAS2B,SAASC,MACvB,sECEAC,EAAQC,YACZjE,EAHY,GAKZkE,YACEC,cACAC,IACAC,2BAIEC,EAAetC,mBAErBuC,QAAQC,IAAI,CAAExC,aAAYsC,iBAU1BG,IAASC,OAAOrC,EAAAC,EAAAC,cARD,WACb,OACEF,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAUX,MAAOA,GACf3B,EAAAC,EAAAC,cAACqC,EAAD,QAKU,MAAWC,SAASC,eAAe,SDuF7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e3941261.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// REDUCERS\n// import current from './current.js';\n// import manifest from './manifest.js';\n// import pages from './pages.js';\n// import themes from './themes.js';\nimport user from './user.js';\n\n// import all other reducers here\n// the root reducer will be fed to any generated store\nconst rootReducer = combineReducers({\n  user\n});\n\nexport default rootReducer;","// MAIN REDUCER\nexport default function user(\n  state = [],\n  action\n) {\n  let newState = {\n    ...state\n  };\n\n  switch (action.type) {\n    default:\n      return newState;\n  }\n}","import colors from './colors';\nimport app from './app';\n\nconst styles = {\n  colors,\n  app\n};\n\nexport default styles;","\nconst primaries = {\n  yellow: '#FFFA21',\n  orange: '#E8901E',\n  red: '#FF2E3D',\n  purple: '#7A2EE8',\n  cyan: '#2EB8FF'\n};\n\nconst pastels = {\n  yellow: '#FBFFBC',\n  orange: '#E8D0AB',\n  red: '#FFCAC8',\n  purple: '#D3BBE8',\n  cyan: '#C8E7FF'\n}\n\nconst darks = {\n  yellow: '#373B21',\n  orange: '#241E14',\n  red: '#3B2524',\n  purple: '#1E1624',\n  cyan: '#242F3B'\n};\n\nconst colors = {\n  primaries,\n  pastels,\n  darks\n};\n\nexport default colors;","import colors from './colors';\n\nconst container = {\n  textAlign:'center',\n  minHeight: '100vh',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'center'\n};\n\nconst app = {\n  container\n};\n\nexport default app;","// IMPORTS\nimport React, { Component } from 'react';\nimport * as blockstack from 'blockstack';\nimport { Grommet, Box, Button } from 'grommet';\nimport { grommet, dark } from 'grommet/themes';\nimport { Login } from \"grommet-icons\";\n\n// STYLES\nimport styles from '../styles';\n\nclass SignIn extends Component {\n  onClick = () => {\n    blockstack.redirectToSignIn(\n      `${window.location.origin}`,\n      `${window.location.origin}/manifest.json`,\n      ['DEFAULT_SCOPE']\n    );\n  }\n\n  render() {\n    return (\n      <Box pad={{ horizontal: 'xlarge', vertical: 'large' }}>\n        <Box>\n          <header>\n            <h1\n              style={{\n                color: styles.colors.pastels.purple\n              }}\n            >\n              welcome to <strong style={{\n                color: styles.colors.primaries.purple\n              }}>feed</strong>.\n            </h1>\n            <p style={{color: styles.colors.pastels.purple}}>feed is a decentralized social network powered by blockchain technology.</p>\n            <Box align=\"center\" pad=\"large\" gap=\"small\">\n              <Button icon={<Login />} label=\"Sign in with your Blockstack ID\" onClick={this.onClick} primary />\n            </Box>\n          </header>\n        </Box>\n      </Box>\n    );\n  }\n};\n\nexport default SignIn;","// IMPORTS\nimport React, { Component } from 'react';\nimport { Grommet, Box, Button } from 'grommet';\nimport { grommet, dark } from 'grommet/themes';\nimport { Login } from \"grommet-icons\";\n\n// STYLES\nimport styles from './styles';\n\n// COMPONENTS\nimport SignIn from './components/SignIn.jsx';\n\nclass App extends Component {\n  render() {\n    return (\n      <Grommet theme={grommet}>\n        <div \n          style={{\n            background: styles.colors.darks.purple,\n            ...styles.app.container\n          }}\n        >\n          <SignIn />\n        </div>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// IMPORTS\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as blockstack from 'blockstack';\n// REDUX\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise-middleware';\n// REDUCERS\nimport rootReducer from './reducers/root';\n// COMPONENTS\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// MISC STYLES\nimport './index.css';\n\nconst state = {};\n\nconst store = createStore(\n  rootReducer,\n  state,\n  applyMiddleware(\n    promise(),\n    thunk,\n    createLogger()\n  )\n);\n\nconst userSignedIn = blockstack.isUserSignedIn();\n\nconsole.log({ blockstack, userSignedIn });\n\nconst Client = () => {\n  return (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n}\n\nReactDOM.render(<Client/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}